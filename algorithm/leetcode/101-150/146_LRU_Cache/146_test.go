package _46_LRU_Cache

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test1(t *testing.T) {
	obj := Constructor(2)
	obj.Put(1, 1)
	obj.Put(2, 2)
	assert.EqualValues(t, 1, obj.Get(1))
	obj.Put(3, 3)
	assert.EqualValues(t, -1, obj.Get(2))
	obj.Put(4, 4)
	assert.EqualValues(t, -1, obj.Get(1))
	assert.EqualValues(t, 3, obj.Get(3))
	assert.EqualValues(t, 4, obj.Get(4))
}

func Test2(t *testing.T) {
	obj := Constructor(1)
	obj.Put(2, 1)
	assert.EqualValues(t, 1, obj.Get(2))
	obj.Put(3, 2)
	assert.EqualValues(t, -1, obj.Get(2))
	assert.EqualValues(t, 2, obj.Get(3))
}

func Test3(t *testing.T) {
	obj := Constructor(2)
	obj.Put(2, 1)
	obj.Put(1, 1)
	obj.Put(2, 3)
	obj.Put(4, 1)
	assert.EqualValues(t, -1, obj.Get(1))
	assert.EqualValues(t, 3, obj.Get(2))
}

func Test4(t *testing.T) {
	obj := Constructor(10)
	obj.Put(10, 13)
	obj.Put(3, 17)
	obj.Put(6, 11)
	obj.Put(10, 5)
	obj.Put(9, 10)
	assert.EqualValues(t, -1, obj.Get(13))
	obj.Put(2, 19)
	assert.EqualValues(t, 19, obj.Get(2))
	assert.EqualValues(t, 17, obj.Get(3))
	obj.Put(5, 25)
	assert.EqualValues(t, -1, obj.Get(8))
	obj.Put(9, 22)
	obj.Put(5, 5)
	obj.Put(1, 30)
	assert.EqualValues(t, -1, obj.Get(11))
	obj.Put(9, 12)
	assert.EqualValues(t, -1, obj.Get(7))
	assert.EqualValues(t, 5, obj.Get(5))
	assert.EqualValues(t, -1, obj.Get(8))
	assert.EqualValues(t, 12, obj.Get(9))
	obj.Put(4, 30)
	obj.Put(9, 3)
	assert.EqualValues(t, 3, obj.Get(9))
	assert.EqualValues(t, 5, obj.Get(10))
	assert.EqualValues(t, 5, obj.Get(10))
	obj.Put(6, 14)
	obj.Put(3, 1)
	assert.EqualValues(t, 1, obj.Get(3))
	obj.Put(10, 11)
	assert.EqualValues(t, -1, obj.Get(8))
	obj.Put(2, 14)
	assert.EqualValues(t, 30, obj.Get(1))
	assert.EqualValues(t, 5, obj.Get(5))
	assert.EqualValues(t, 30, obj.Get(4))
	obj.Put(11, 4)
	obj.Put(12, 24)
	obj.Put(5, 18)
	assert.EqualValues(t, -1, obj.Get(13))
	obj.Put(7, 23)
	assert.EqualValues(t, -1, obj.Get(8))
	assert.EqualValues(t, 24, obj.Get(12))
	obj.Put(3, 27)
	obj.Put(2, 12)
	assert.EqualValues(t, 18, obj.Get(5))
	obj.Put(2, 9)
	obj.Put(13, 4)
	obj.Put(8, 18)
	obj.Put(1, 7)
	assert.EqualValues(t, -1, obj.Get(6))
	obj.Put(9, 29)
	obj.Put(8, 21)
	assert.EqualValues(t, 18, obj.Get(5))
	obj.Put(6, 30)
	obj.Put(1, 12)
	assert.EqualValues(t, -1, obj.Get(10))
	obj.Put(4, 15)
	obj.Put(7, 22)
	obj.Put(11, 26)
	obj.Put(8, 17)
	obj.Put(9, 29)
	assert.EqualValues(t, 18, obj.Get(5))
	obj.Put(3, 4)
	obj.Put(11, 30)
	assert.EqualValues(t, -1, obj.Get(12))
	obj.Put(4, 29)
	assert.EqualValues(t, 4, obj.Get(3))
	assert.EqualValues(t, 29, obj.Get(9))
	assert.EqualValues(t, 30, obj.Get(6))
	obj.Put(3, 4)
	assert.EqualValues(t, 12, obj.Get(1))
	assert.EqualValues(t, -1, obj.Get(10))
	obj.Put(3, 29)
	obj.Put(10, 28)
	obj.Put(1, 20)
	obj.Put(11, 13)
	assert.EqualValues(t, 29, obj.Get(3))
	obj.Put(3, 12)
	obj.Put(3, 8)
	obj.Put(10, 9)
	obj.Put(3, 26)
	assert.EqualValues(t, 17, obj.Get(8))
	assert.EqualValues(t, 22, obj.Get(7))
	assert.EqualValues(t, 18, obj.Get(5))
	obj.Put(13, 17)
	obj.Put(2, 27)
	obj.Put(11, 15)
	assert.EqualValues(t, -1, obj.Get(12))
	obj.Put(9, 19)
	obj.Put(2, 15)
	obj.Put(3, 16)
	assert.EqualValues(t, 20, obj.Get(1))
	obj.Put(12, 17)
	obj.Put(9, 1)
	obj.Put(6, 19)
	assert.EqualValues(t, -1, obj.Get(4))
	assert.EqualValues(t, 18, obj.Get(5))
	assert.EqualValues(t, 18, obj.Get(5))
	obj.Put(8, 1)
	obj.Put(11, 7)
	obj.Put(5, 2)
	obj.Put(9, 28)
	assert.EqualValues(t, 20, obj.Get(1))
	obj.Put(2, 2)
	obj.Put(7, 4)
	obj.Put(4, 22)
	obj.Put(7, 24)
	obj.Put(9, 26)
	obj.Put(13, 28)
	obj.Put(11, 26)
}

func Test5(t *testing.T) {
	expectedArray := []int{-1, 19, 17, -1, -1, -1, 5, -1, 12, 3, 5, 5, 1, -1, 30, 5, 30, -1, -1, 24, 18, -1, 18, -1, 18, -1, 4, 29, 30, 12, -1, 29, 17, 22, 18, -1, 20, -1, 18, 18, 20}
	expectedIndex := 0
	test := [][]int{{10, 13}, {3, 17}, {6, 11}, {10, 5}, {9, 10}, {13}, {2, 19}, {2}, {3}, {5, 25}, {8}, {9, 22}, {5, 5}, {1, 30}, {11}, {9, 12}, {7}, {5}, {8}, {9}, {4, 30}, {9, 3}, {9}, {10}, {10}, {6, 14}, {3, 1}, {3}, {10, 11}, {8}, {2, 14}, {1}, {5}, {4}, {11, 4}, {12, 24}, {5, 18}, {13}, {7, 23}, {8}, {12}, {3, 27}, {2, 12}, {5}, {2, 9}, {13, 4}, {8, 18}, {1, 7}, {6}, {9, 29}, {8, 21}, {5}, {6, 30}, {1, 12}, {10}, {4, 15}, {7, 22}, {11, 26}, {8, 17}, {9, 29}, {5}, {3, 4}, {11, 30}, {12}, {4, 29}, {3}, {9}, {6}, {3, 4}, {1}, {10}, {3, 29}, {10, 28}, {1, 20}, {11, 13}, {3}, {3, 12}, {3, 8}, {10, 9}, {3, 26}, {8}, {7}, {5}, {13, 17}, {2, 27}, {11, 15}, {12}, {9, 19}, {2, 15}, {3, 16}, {1}, {12, 17}, {9, 1}, {6, 19}, {4}, {5}, {5}, {8, 1}, {11, 7}, {5, 2}, {9, 28}, {1}, {2, 2}, {7, 4}, {4, 22}, {7, 24}, {9, 26}, {13, 28}, {11, 26}}
	for i := 0; i < len(test); i++ {
		if len(test[i]) == 1 {
			fmt.Println(fmt.Sprintf("assert.EqualValues(t, %d, obj.Get(%d))", expectedArray[expectedIndex], test[i][0]))
			expectedIndex++
		} else if len(test[i]) == 2 {
			fmt.Println(fmt.Sprintf("obj.Put(%d, %d)", test[i][0], test[i][1]))
		}
	}
}
